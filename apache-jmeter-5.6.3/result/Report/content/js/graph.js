/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13064.0, "minX": 0.0, "maxY": 66758.0, "series": [{"data": [[0.0, 13064.0], [0.1, 24976.0], [0.2, 26156.0], [0.3, 26713.0], [0.4, 26921.0], [0.5, 27225.0], [0.6, 27470.0], [0.7, 27680.0], [0.8, 27845.0], [0.9, 28083.0], [1.0, 28262.0], [1.1, 28388.0], [1.2, 28557.0], [1.3, 28748.0], [1.4, 28982.0], [1.5, 29129.0], [1.6, 29302.0], [1.7, 29433.0], [1.8, 29593.0], [1.9, 29780.0], [2.0, 30087.0], [2.1, 30265.0], [2.2, 30418.0], [2.3, 30545.0], [2.4, 30693.0], [2.5, 30823.0], [2.6, 30951.0], [2.7, 31036.0], [2.8, 31137.0], [2.9, 31224.0], [3.0, 31273.0], [3.1, 31362.0], [3.2, 31488.0], [3.3, 31548.0], [3.4, 31659.0], [3.5, 31729.0], [3.6, 31798.0], [3.7, 31916.0], [3.8, 31946.0], [3.9, 32048.0], [4.0, 32090.0], [4.1, 32170.0], [4.2, 32242.0], [4.3, 32340.0], [4.4, 32437.0], [4.5, 32560.0], [4.6, 32668.0], [4.7, 32765.0], [4.8, 32848.0], [4.9, 32909.0], [5.0, 33010.0], [5.1, 33059.0], [5.2, 33141.0], [5.3, 33213.0], [5.4, 33265.0], [5.5, 33319.0], [5.6, 33370.0], [5.7, 33415.0], [5.8, 33457.0], [5.9, 33500.0], [6.0, 33544.0], [6.1, 33583.0], [6.2, 33606.0], [6.3, 33659.0], [6.4, 33704.0], [6.5, 33729.0], [6.6, 33750.0], [6.7, 33770.0], [6.8, 33797.0], [6.9, 33823.0], [7.0, 33844.0], [7.1, 33862.0], [7.2, 33899.0], [7.3, 33908.0], [7.4, 33928.0], [7.5, 33955.0], [7.6, 33996.0], [7.7, 34026.0], [7.8, 34050.0], [7.9, 34090.0], [8.0, 34110.0], [8.1, 34128.0], [8.2, 34174.0], [8.3, 34203.0], [8.4, 34227.0], [8.5, 34249.0], [8.6, 34283.0], [8.7, 34318.0], [8.8, 34344.0], [8.9, 34371.0], [9.0, 34392.0], [9.1, 34427.0], [9.2, 34458.0], [9.3, 34491.0], [9.4, 34522.0], [9.5, 34539.0], [9.6, 34564.0], [9.7, 34596.0], [9.8, 34618.0], [9.9, 34648.0], [10.0, 34680.0], [10.1, 34709.0], [10.2, 34744.0], [10.3, 34764.0], [10.4, 34776.0], [10.5, 34807.0], [10.6, 34830.0], [10.7, 34852.0], [10.8, 34882.0], [10.9, 34905.0], [11.0, 34932.0], [11.1, 34968.0], [11.2, 35002.0], [11.3, 35024.0], [11.4, 35053.0], [11.5, 35079.0], [11.6, 35108.0], [11.7, 35131.0], [11.8, 35152.0], [11.9, 35179.0], [12.0, 35197.0], [12.1, 35217.0], [12.2, 35239.0], [12.3, 35261.0], [12.4, 35296.0], [12.5, 35324.0], [12.6, 35346.0], [12.7, 35369.0], [12.8, 35390.0], [12.9, 35414.0], [13.0, 35439.0], [13.1, 35460.0], [13.2, 35476.0], [13.3, 35518.0], [13.4, 35551.0], [13.5, 35572.0], [13.6, 35590.0], [13.7, 35606.0], [13.8, 35631.0], [13.9, 35664.0], [14.0, 35709.0], [14.1, 35736.0], [14.2, 35767.0], [14.3, 35797.0], [14.4, 35830.0], [14.5, 35877.0], [14.6, 35899.0], [14.7, 35922.0], [14.8, 35968.0], [14.9, 35992.0], [15.0, 36017.0], [15.1, 36040.0], [15.2, 36076.0], [15.3, 36114.0], [15.4, 36147.0], [15.5, 36172.0], [15.6, 36209.0], [15.7, 36246.0], [15.8, 36279.0], [15.9, 36305.0], [16.0, 36336.0], [16.1, 36354.0], [16.2, 36394.0], [16.3, 36444.0], [16.4, 36471.0], [16.5, 36505.0], [16.6, 36544.0], [16.7, 36574.0], [16.8, 36613.0], [16.9, 36658.0], [17.0, 36694.0], [17.1, 36717.0], [17.2, 36761.0], [17.3, 36808.0], [17.4, 36837.0], [17.5, 36864.0], [17.6, 36890.0], [17.7, 36945.0], [17.8, 36982.0], [17.9, 37019.0], [18.0, 37057.0], [18.1, 37083.0], [18.2, 37111.0], [18.3, 37151.0], [18.4, 37181.0], [18.5, 37207.0], [18.6, 37251.0], [18.7, 37296.0], [18.8, 37326.0], [18.9, 37366.0], [19.0, 37405.0], [19.1, 37441.0], [19.2, 37462.0], [19.3, 37490.0], [19.4, 37520.0], [19.5, 37557.0], [19.6, 37589.0], [19.7, 37634.0], [19.8, 37671.0], [19.9, 37709.0], [20.0, 37752.0], [20.1, 37786.0], [20.2, 37819.0], [20.3, 37852.0], [20.4, 37887.0], [20.5, 37918.0], [20.6, 37950.0], [20.7, 37976.0], [20.8, 38019.0], [20.9, 38044.0], [21.0, 38076.0], [21.1, 38103.0], [21.2, 38137.0], [21.3, 38169.0], [21.4, 38212.0], [21.5, 38248.0], [21.6, 38297.0], [21.7, 38319.0], [21.8, 38342.0], [21.9, 38384.0], [22.0, 38411.0], [22.1, 38436.0], [22.2, 38488.0], [22.3, 38518.0], [22.4, 38568.0], [22.5, 38601.0], [22.6, 38628.0], [22.7, 38671.0], [22.8, 38704.0], [22.9, 38757.0], [23.0, 38818.0], [23.1, 38850.0], [23.2, 38889.0], [23.3, 38932.0], [23.4, 38989.0], [23.5, 39023.0], [23.6, 39061.0], [23.7, 39103.0], [23.8, 39174.0], [23.9, 39220.0], [24.0, 39283.0], [24.1, 39363.0], [24.2, 39423.0], [24.3, 39503.0], [24.4, 39576.0], [24.5, 39627.0], [24.6, 39679.0], [24.7, 39719.0], [24.8, 39775.0], [24.9, 39854.0], [25.0, 39898.0], [25.1, 39941.0], [25.2, 39989.0], [25.3, 40050.0], [25.4, 40087.0], [25.5, 40128.0], [25.6, 40164.0], [25.7, 40209.0], [25.8, 40258.0], [25.9, 40303.0], [26.0, 40332.0], [26.1, 40383.0], [26.2, 40435.0], [26.3, 40457.0], [26.4, 40480.0], [26.5, 40505.0], [26.6, 40552.0], [26.7, 40583.0], [26.8, 40611.0], [26.9, 40631.0], [27.0, 40666.0], [27.1, 40695.0], [27.2, 40719.0], [27.3, 40750.0], [27.4, 40773.0], [27.5, 40794.0], [27.6, 40812.0], [27.7, 40843.0], [27.8, 40884.0], [27.9, 40907.0], [28.0, 40939.0], [28.1, 40959.0], [28.2, 40984.0], [28.3, 41010.0], [28.4, 41055.0], [28.5, 41082.0], [28.6, 41110.0], [28.7, 41136.0], [28.8, 41156.0], [28.9, 41192.0], [29.0, 41222.0], [29.1, 41242.0], [29.2, 41283.0], [29.3, 41306.0], [29.4, 41352.0], [29.5, 41380.0], [29.6, 41408.0], [29.7, 41435.0], [29.8, 41463.0], [29.9, 41488.0], [30.0, 41517.0], [30.1, 41552.0], [30.2, 41585.0], [30.3, 41618.0], [30.4, 41671.0], [30.5, 41706.0], [30.6, 41746.0], [30.7, 41780.0], [30.8, 41805.0], [30.9, 41842.0], [31.0, 41872.0], [31.1, 41900.0], [31.2, 41929.0], [31.3, 41950.0], [31.4, 41988.0], [31.5, 42028.0], [31.6, 42061.0], [31.7, 42119.0], [31.8, 42171.0], [31.9, 42204.0], [32.0, 42224.0], [32.1, 42262.0], [32.2, 42304.0], [32.3, 42345.0], [32.4, 42367.0], [32.5, 42407.0], [32.6, 42441.0], [32.7, 42479.0], [32.8, 42518.0], [32.9, 42560.0], [33.0, 42591.0], [33.1, 42628.0], [33.2, 42667.0], [33.3, 42726.0], [33.4, 42756.0], [33.5, 42780.0], [33.6, 42809.0], [33.7, 42829.0], [33.8, 42859.0], [33.9, 42880.0], [34.0, 42908.0], [34.1, 42957.0], [34.2, 42985.0], [34.3, 43023.0], [34.4, 43070.0], [34.5, 43124.0], [34.6, 43181.0], [34.7, 43220.0], [34.8, 43248.0], [34.9, 43284.0], [35.0, 43308.0], [35.1, 43348.0], [35.2, 43399.0], [35.3, 43429.0], [35.4, 43483.0], [35.5, 43522.0], [35.6, 43560.0], [35.7, 43597.0], [35.8, 43620.0], [35.9, 43643.0], [36.0, 43671.0], [36.1, 43694.0], [36.2, 43735.0], [36.3, 43765.0], [36.4, 43799.0], [36.5, 43852.0], [36.6, 43887.0], [36.7, 43908.0], [36.8, 43950.0], [36.9, 43982.0], [37.0, 44010.0], [37.1, 44051.0], [37.2, 44091.0], [37.3, 44125.0], [37.4, 44164.0], [37.5, 44218.0], [37.6, 44251.0], [37.7, 44301.0], [37.8, 44348.0], [37.9, 44377.0], [38.0, 44408.0], [38.1, 44457.0], [38.2, 44504.0], [38.3, 44535.0], [38.4, 44585.0], [38.5, 44619.0], [38.6, 44656.0], [38.7, 44704.0], [38.8, 44753.0], [38.9, 44784.0], [39.0, 44831.0], [39.1, 44876.0], [39.2, 44912.0], [39.3, 44967.0], [39.4, 45037.0], [39.5, 45083.0], [39.6, 45121.0], [39.7, 45172.0], [39.8, 45229.0], [39.9, 45293.0], [40.0, 45343.0], [40.1, 45381.0], [40.2, 45417.0], [40.3, 45455.0], [40.4, 45485.0], [40.5, 45520.0], [40.6, 45549.0], [40.7, 45597.0], [40.8, 45635.0], [40.9, 45671.0], [41.0, 45690.0], [41.1, 45711.0], [41.2, 45743.0], [41.3, 45768.0], [41.4, 45795.0], [41.5, 45813.0], [41.6, 45844.0], [41.7, 45868.0], [41.8, 45894.0], [41.9, 45926.0], [42.0, 45946.0], [42.1, 45972.0], [42.2, 45999.0], [42.3, 46036.0], [42.4, 46050.0], [42.5, 46067.0], [42.6, 46083.0], [42.7, 46102.0], [42.8, 46121.0], [42.9, 46146.0], [43.0, 46165.0], [43.1, 46183.0], [43.2, 46205.0], [43.3, 46229.0], [43.4, 46246.0], [43.5, 46267.0], [43.6, 46286.0], [43.7, 46314.0], [43.8, 46334.0], [43.9, 46346.0], [44.0, 46361.0], [44.1, 46379.0], [44.2, 46406.0], [44.3, 46424.0], [44.4, 46441.0], [44.5, 46476.0], [44.6, 46495.0], [44.7, 46519.0], [44.8, 46536.0], [44.9, 46575.0], [45.0, 46599.0], [45.1, 46614.0], [45.2, 46630.0], [45.3, 46640.0], [45.4, 46662.0], [45.5, 46673.0], [45.6, 46691.0], [45.7, 46703.0], [45.8, 46725.0], [45.9, 46742.0], [46.0, 46760.0], [46.1, 46780.0], [46.2, 46803.0], [46.3, 46822.0], [46.4, 46834.0], [46.5, 46850.0], [46.6, 46866.0], [46.7, 46892.0], [46.8, 46914.0], [46.9, 46932.0], [47.0, 46950.0], [47.1, 46972.0], [47.2, 46988.0], [47.3, 47011.0], [47.4, 47030.0], [47.5, 47052.0], [47.6, 47079.0], [47.7, 47101.0], [47.8, 47123.0], [47.9, 47142.0], [48.0, 47163.0], [48.1, 47198.0], [48.2, 47212.0], [48.3, 47235.0], [48.4, 47265.0], [48.5, 47281.0], [48.6, 47308.0], [48.7, 47331.0], [48.8, 47354.0], [48.9, 47377.0], [49.0, 47395.0], [49.1, 47414.0], [49.2, 47438.0], [49.3, 47461.0], [49.4, 47478.0], [49.5, 47493.0], [49.6, 47511.0], [49.7, 47525.0], [49.8, 47548.0], [49.9, 47569.0], [50.0, 47583.0], [50.1, 47602.0], [50.2, 47622.0], [50.3, 47652.0], [50.4, 47674.0], [50.5, 47700.0], [50.6, 47720.0], [50.7, 47740.0], [50.8, 47757.0], [50.9, 47773.0], [51.0, 47788.0], [51.1, 47801.0], [51.2, 47818.0], [51.3, 47834.0], [51.4, 47852.0], [51.5, 47879.0], [51.6, 47901.0], [51.7, 47910.0], [51.8, 47934.0], [51.9, 47951.0], [52.0, 47979.0], [52.1, 47994.0], [52.2, 48010.0], [52.3, 48030.0], [52.4, 48048.0], [52.5, 48068.0], [52.6, 48084.0], [52.7, 48110.0], [52.8, 48132.0], [52.9, 48157.0], [53.0, 48169.0], [53.1, 48191.0], [53.2, 48202.0], [53.3, 48214.0], [53.4, 48226.0], [53.5, 48252.0], [53.6, 48268.0], [53.7, 48294.0], [53.8, 48312.0], [53.9, 48337.0], [54.0, 48353.0], [54.1, 48376.0], [54.2, 48395.0], [54.3, 48408.0], [54.4, 48441.0], [54.5, 48463.0], [54.6, 48479.0], [54.7, 48499.0], [54.8, 48518.0], [54.9, 48542.0], [55.0, 48558.0], [55.1, 48578.0], [55.2, 48611.0], [55.3, 48633.0], [55.4, 48649.0], [55.5, 48669.0], [55.6, 48686.0], [55.7, 48712.0], [55.8, 48731.0], [55.9, 48752.0], [56.0, 48775.0], [56.1, 48797.0], [56.2, 48825.0], [56.3, 48843.0], [56.4, 48871.0], [56.5, 48890.0], [56.6, 48924.0], [56.7, 48946.0], [56.8, 48953.0], [56.9, 48971.0], [57.0, 48980.0], [57.1, 49000.0], [57.2, 49028.0], [57.3, 49044.0], [57.4, 49065.0], [57.5, 49086.0], [57.6, 49104.0], [57.7, 49128.0], [57.8, 49145.0], [57.9, 49160.0], [58.0, 49187.0], [58.1, 49201.0], [58.2, 49219.0], [58.3, 49236.0], [58.4, 49253.0], [58.5, 49272.0], [58.6, 49285.0], [58.7, 49299.0], [58.8, 49311.0], [58.9, 49326.0], [59.0, 49336.0], [59.1, 49358.0], [59.2, 49379.0], [59.3, 49400.0], [59.4, 49423.0], [59.5, 49439.0], [59.6, 49459.0], [59.7, 49484.0], [59.8, 49491.0], [59.9, 49512.0], [60.0, 49523.0], [60.1, 49543.0], [60.2, 49575.0], [60.3, 49590.0], [60.4, 49604.0], [60.5, 49633.0], [60.6, 49654.0], [60.7, 49665.0], [60.8, 49687.0], [60.9, 49699.0], [61.0, 49715.0], [61.1, 49731.0], [61.2, 49747.0], [61.3, 49766.0], [61.4, 49780.0], [61.5, 49794.0], [61.6, 49819.0], [61.7, 49837.0], [61.8, 49855.0], [61.9, 49881.0], [62.0, 49907.0], [62.1, 49928.0], [62.2, 49942.0], [62.3, 49966.0], [62.4, 49986.0], [62.5, 49999.0], [62.6, 50019.0], [62.7, 50037.0], [62.8, 50051.0], [62.9, 50071.0], [63.0, 50088.0], [63.1, 50103.0], [63.2, 50117.0], [63.3, 50129.0], [63.4, 50148.0], [63.5, 50159.0], [63.6, 50172.0], [63.7, 50199.0], [63.8, 50212.0], [63.9, 50233.0], [64.0, 50252.0], [64.1, 50277.0], [64.2, 50295.0], [64.3, 50309.0], [64.4, 50328.0], [64.5, 50352.0], [64.6, 50375.0], [64.7, 50386.0], [64.8, 50404.0], [64.9, 50430.0], [65.0, 50451.0], [65.1, 50483.0], [65.2, 50510.0], [65.3, 50529.0], [65.4, 50548.0], [65.5, 50570.0], [65.6, 50592.0], [65.7, 50613.0], [65.8, 50648.0], [65.9, 50665.0], [66.0, 50685.0], [66.1, 50703.0], [66.2, 50727.0], [66.3, 50750.0], [66.4, 50772.0], [66.5, 50793.0], [66.6, 50814.0], [66.7, 50847.0], [66.8, 50864.0], [66.9, 50883.0], [67.0, 50903.0], [67.1, 50941.0], [67.2, 50971.0], [67.3, 50988.0], [67.4, 51020.0], [67.5, 51039.0], [67.6, 51066.0], [67.7, 51081.0], [67.8, 51103.0], [67.9, 51121.0], [68.0, 51147.0], [68.1, 51164.0], [68.2, 51186.0], [68.3, 51215.0], [68.4, 51244.0], [68.5, 51267.0], [68.6, 51286.0], [68.7, 51311.0], [68.8, 51339.0], [68.9, 51374.0], [69.0, 51398.0], [69.1, 51433.0], [69.2, 51450.0], [69.3, 51476.0], [69.4, 51497.0], [69.5, 51516.0], [69.6, 51543.0], [69.7, 51567.0], [69.8, 51600.0], [69.9, 51629.0], [70.0, 51660.0], [70.1, 51690.0], [70.2, 51713.0], [70.3, 51751.0], [70.4, 51787.0], [70.5, 51821.0], [70.6, 51852.0], [70.7, 51895.0], [70.8, 51920.0], [70.9, 51953.0], [71.0, 51984.0], [71.1, 52023.0], [71.2, 52076.0], [71.3, 52113.0], [71.4, 52149.0], [71.5, 52186.0], [71.6, 52203.0], [71.7, 52265.0], [71.8, 52296.0], [71.9, 52320.0], [72.0, 52346.0], [72.1, 52383.0], [72.2, 52416.0], [72.3, 52456.0], [72.4, 52507.0], [72.5, 52548.0], [72.6, 52584.0], [72.7, 52627.0], [72.8, 52653.0], [72.9, 52690.0], [73.0, 52723.0], [73.1, 52765.0], [73.2, 52794.0], [73.3, 52837.0], [73.4, 52855.0], [73.5, 52896.0], [73.6, 52922.0], [73.7, 52952.0], [73.8, 52979.0], [73.9, 53025.0], [74.0, 53043.0], [74.1, 53094.0], [74.2, 53128.0], [74.3, 53163.0], [74.4, 53196.0], [74.5, 53234.0], [74.6, 53255.0], [74.7, 53297.0], [74.8, 53346.0], [74.9, 53376.0], [75.0, 53409.0], [75.1, 53442.0], [75.2, 53483.0], [75.3, 53509.0], [75.4, 53529.0], [75.5, 53546.0], [75.6, 53583.0], [75.7, 53612.0], [75.8, 53694.0], [75.9, 53760.0], [76.0, 53794.0], [76.1, 53835.0], [76.2, 53866.0], [76.3, 53920.0], [76.4, 53987.0], [76.5, 54029.0], [76.6, 54070.0], [76.7, 54118.0], [76.8, 54163.0], [76.9, 54212.0], [77.0, 54268.0], [77.1, 54316.0], [77.2, 54340.0], [77.3, 54392.0], [77.4, 54454.0], [77.5, 54497.0], [77.6, 54542.0], [77.7, 54591.0], [77.8, 54647.0], [77.9, 54712.0], [78.0, 54756.0], [78.1, 54807.0], [78.2, 54867.0], [78.3, 54925.0], [78.4, 54979.0], [78.5, 55025.0], [78.6, 55061.0], [78.7, 55118.0], [78.8, 55173.0], [78.9, 55196.0], [79.0, 55251.0], [79.1, 55297.0], [79.2, 55342.0], [79.3, 55380.0], [79.4, 55425.0], [79.5, 55476.0], [79.6, 55541.0], [79.7, 55589.0], [79.8, 55652.0], [79.9, 55682.0], [80.0, 55729.0], [80.1, 55767.0], [80.2, 55800.0], [80.3, 55823.0], [80.4, 55860.0], [80.5, 55893.0], [80.6, 55922.0], [80.7, 55949.0], [80.8, 56012.0], [80.9, 56064.0], [81.0, 56098.0], [81.1, 56141.0], [81.2, 56196.0], [81.3, 56245.0], [81.4, 56280.0], [81.5, 56327.0], [81.6, 56393.0], [81.7, 56439.0], [81.8, 56473.0], [81.9, 56516.0], [82.0, 56556.0], [82.1, 56601.0], [82.2, 56661.0], [82.3, 56711.0], [82.4, 56761.0], [82.5, 56807.0], [82.6, 56859.0], [82.7, 56903.0], [82.8, 56948.0], [82.9, 56988.0], [83.0, 57040.0], [83.1, 57125.0], [83.2, 57186.0], [83.3, 57266.0], [83.4, 57357.0], [83.5, 57401.0], [83.6, 57450.0], [83.7, 57503.0], [83.8, 57566.0], [83.9, 57645.0], [84.0, 57731.0], [84.1, 57815.0], [84.2, 57868.0], [84.3, 57963.0], [84.4, 58025.0], [84.5, 58144.0], [84.6, 58242.0], [84.7, 58340.0], [84.8, 58444.0], [84.9, 58505.0], [85.0, 58572.0], [85.1, 58655.0], [85.2, 58731.0], [85.3, 58831.0], [85.4, 58920.0], [85.5, 59008.0], [85.6, 59094.0], [85.7, 59181.0], [85.8, 59244.0], [85.9, 59291.0], [86.0, 59375.0], [86.1, 59432.0], [86.2, 59499.0], [86.3, 59546.0], [86.4, 59595.0], [86.5, 59647.0], [86.6, 59691.0], [86.7, 59717.0], [86.8, 59785.0], [86.9, 59836.0], [87.0, 59898.0], [87.1, 59957.0], [87.2, 60012.0], [87.3, 60059.0], [87.4, 60104.0], [87.5, 60151.0], [87.6, 60222.0], [87.7, 60280.0], [87.8, 60315.0], [87.9, 60357.0], [88.0, 60404.0], [88.1, 60452.0], [88.2, 60515.0], [88.3, 60570.0], [88.4, 60623.0], [88.5, 60670.0], [88.6, 60711.0], [88.7, 60744.0], [88.8, 60796.0], [88.9, 60839.0], [89.0, 60889.0], [89.1, 60929.0], [89.2, 60982.0], [89.3, 61016.0], [89.4, 61056.0], [89.5, 61112.0], [89.6, 61145.0], [89.7, 61170.0], [89.8, 61208.0], [89.9, 61253.0], [90.0, 61291.0], [90.1, 61333.0], [90.2, 61356.0], [90.3, 61407.0], [90.4, 61440.0], [90.5, 61482.0], [90.6, 61520.0], [90.7, 61542.0], [90.8, 61596.0], [90.9, 61622.0], [91.0, 61647.0], [91.1, 61677.0], [91.2, 61703.0], [91.3, 61738.0], [91.4, 61761.0], [91.5, 61792.0], [91.6, 61817.0], [91.7, 61853.0], [91.8, 61896.0], [91.9, 61918.0], [92.0, 61955.0], [92.1, 62003.0], [92.2, 62032.0], [92.3, 62107.0], [92.4, 62161.0], [92.5, 62225.0], [92.6, 62306.0], [92.7, 62339.0], [92.8, 62406.0], [92.9, 62440.0], [93.0, 62489.0], [93.1, 62553.0], [93.2, 62597.0], [93.3, 62684.0], [93.4, 62730.0], [93.5, 62770.0], [93.6, 62828.0], [93.7, 62871.0], [93.8, 62892.0], [93.9, 62940.0], [94.0, 62982.0], [94.1, 63037.0], [94.2, 63083.0], [94.3, 63117.0], [94.4, 63174.0], [94.5, 63232.0], [94.6, 63294.0], [94.7, 63334.0], [94.8, 63376.0], [94.9, 63439.0], [95.0, 63480.0], [95.1, 63513.0], [95.2, 63560.0], [95.3, 63605.0], [95.4, 63663.0], [95.5, 63702.0], [95.6, 63740.0], [95.7, 63775.0], [95.8, 63813.0], [95.9, 63845.0], [96.0, 63874.0], [96.1, 63902.0], [96.2, 63940.0], [96.3, 63968.0], [96.4, 64003.0], [96.5, 64038.0], [96.6, 64067.0], [96.7, 64117.0], [96.8, 64165.0], [96.9, 64202.0], [97.0, 64224.0], [97.1, 64267.0], [97.2, 64310.0], [97.3, 64347.0], [97.4, 64379.0], [97.5, 64402.0], [97.6, 64461.0], [97.7, 64502.0], [97.8, 64538.0], [97.9, 64581.0], [98.0, 64628.0], [98.1, 64666.0], [98.2, 64708.0], [98.3, 64769.0], [98.4, 64839.0], [98.5, 64851.0], [98.6, 64885.0], [98.7, 64935.0], [98.8, 64975.0], [98.9, 65004.0], [99.0, 65066.0], [99.1, 65113.0], [99.2, 65151.0], [99.3, 65202.0], [99.4, 65277.0], [99.5, 65380.0], [99.6, 65463.0], [99.7, 65579.0], [99.8, 65698.0], [99.9, 65850.0], [100.0, 66758.0]], "isOverall": false, "label": "v2", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 13000.0, "maxY": 97.0, "series": [{"data": [[66700.0, 1.0], [32900.0, 18.0], [34500.0, 55.0], [33700.0, 63.0], [35300.0, 65.0], [36100.0, 40.0], [38500.0, 39.0], [36900.0, 35.0], [37700.0, 39.0], [39300.0, 21.0], [40100.0, 35.0], [40900.0, 61.0], [41700.0, 40.0], [42500.0, 37.0], [43300.0, 36.0], [44100.0, 32.0], [44900.0, 24.0], [45700.0, 56.0], [46500.0, 58.0], [47300.0, 63.0], [48100.0, 75.0], [48900.0, 85.0], [49700.0, 89.0], [50500.0, 74.0], [51300.0, 55.0], [52100.0, 46.0], [52900.0, 50.0], [53700.0, 32.0], [54500.0, 32.0], [55300.0, 36.0], [56100.0, 30.0], [56900.0, 35.0], [57700.0, 17.0], [58500.0, 24.0], [59300.0, 18.0], [60100.0, 23.0], [60900.0, 30.0], [61700.0, 50.0], [62500.0, 29.0], [63300.0, 33.0], [64100.0, 30.0], [64900.0, 39.0], [65800.0, 9.0], [13000.0, 1.0], [14800.0, 2.0], [20400.0, 1.0], [21600.0, 1.0], [22800.0, 1.0], [25200.0, 2.0], [26400.0, 2.0], [25600.0, 1.0], [26800.0, 6.0], [27200.0, 10.0], [27600.0, 11.0], [28000.0, 10.0], [28400.0, 7.0], [28800.0, 4.0], [29200.0, 6.0], [29600.0, 4.0], [30000.0, 7.0], [30400.0, 15.0], [30800.0, 13.0], [31200.0, 19.0], [31600.0, 20.0], [32000.0, 31.0], [32400.0, 15.0], [32800.0, 19.0], [34400.0, 48.0], [33600.0, 32.0], [35200.0, 57.0], [36000.0, 49.0], [36800.0, 48.0], [38400.0, 42.0], [37600.0, 38.0], [39200.0, 25.0], [40000.0, 32.0], [40800.0, 45.0], [41600.0, 34.0], [42400.0, 45.0], [43200.0, 48.0], [44000.0, 46.0], [44800.0, 37.0], [45600.0, 48.0], [46400.0, 65.0], [47200.0, 67.0], [48000.0, 80.0], [48800.0, 59.0], [49600.0, 77.0], [50400.0, 53.0], [51200.0, 59.0], [52000.0, 34.0], [52800.0, 47.0], [53600.0, 24.0], [54400.0, 25.0], [55200.0, 29.0], [56000.0, 34.0], [56800.0, 30.0], [57600.0, 17.0], [58400.0, 18.0], [59200.0, 29.0], [60000.0, 30.0], [60800.0, 35.0], [61600.0, 57.0], [62400.0, 31.0], [63200.0, 26.0], [64000.0, 44.0], [64800.0, 40.0], [65600.0, 12.0], [33100.0, 16.0], [33900.0, 56.0], [34700.0, 60.0], [35500.0, 62.0], [36300.0, 50.0], [37100.0, 47.0], [37900.0, 47.0], [38700.0, 29.0], [39500.0, 21.0], [40300.0, 36.0], [41100.0, 53.0], [41900.0, 48.0], [42700.0, 48.0], [43500.0, 39.0], [44300.0, 39.0], [45100.0, 29.0], [45900.0, 58.0], [46700.0, 80.0], [47500.0, 84.0], [48300.0, 73.0], [49100.0, 76.0], [49900.0, 79.0], [50700.0, 68.0], [51500.0, 55.0], [52300.0, 46.0], [53100.0, 45.0], [53900.0, 25.0], [54700.0, 30.0], [56300.0, 26.0], [55500.0, 28.0], [57100.0, 27.0], [57900.0, 21.0], [58700.0, 15.0], [59500.0, 30.0], [60300.0, 33.0], [61100.0, 41.0], [61900.0, 41.0], [62700.0, 33.0], [63500.0, 33.0], [64300.0, 46.0], [65100.0, 34.0], [66200.0, 2.0], [23700.0, 1.0], [24100.0, 1.0], [24900.0, 1.0], [25300.0, 4.0], [25700.0, 1.0], [26100.0, 6.0], [26500.0, 4.0], [26900.0, 8.0], [27300.0, 5.0], [27700.0, 5.0], [28100.0, 8.0], [28500.0, 10.0], [28900.0, 9.0], [29300.0, 9.0], [29700.0, 8.0], [30100.0, 10.0], [30500.0, 4.0], [30900.0, 10.0], [31300.0, 18.0], [31700.0, 17.0], [32100.0, 14.0], [32500.0, 13.0], [34600.0, 54.0], [33000.0, 24.0], [33800.0, 61.0], [35400.0, 61.0], [36200.0, 49.0], [37000.0, 43.0], [37800.0, 42.0], [38600.0, 44.0], [39400.0, 19.0], [40200.0, 33.0], [41000.0, 46.0], [41800.0, 51.0], [42600.0, 35.0], [43400.0, 36.0], [44200.0, 35.0], [45000.0, 31.0], [45800.0, 60.0], [46600.0, 97.0], [47400.0, 77.0], [48200.0, 82.0], [49000.0, 70.0], [49800.0, 68.0], [50600.0, 64.0], [51400.0, 60.0], [52200.0, 36.0], [53000.0, 36.0], [53800.0, 35.0], [54600.0, 22.0], [56200.0, 34.0], [55400.0, 26.0], [57000.0, 19.0], [57800.0, 19.0], [58600.0, 17.0], [59400.0, 25.0], [60200.0, 32.0], [61000.0, 36.0], [61800.0, 43.0], [62600.0, 18.0], [63400.0, 32.0], [64200.0, 44.0], [65000.0, 25.0], [66000.0, 4.0], [65900.0, 1.0], [34100.0, 53.0], [33300.0, 24.0], [34900.0, 49.0], [35700.0, 48.0], [36500.0, 44.0], [37300.0, 40.0], [38100.0, 41.0], [38900.0, 32.0], [39700.0, 23.0], [40500.0, 46.0], [41300.0, 44.0], [42100.0, 34.0], [42900.0, 41.0], [43700.0, 44.0], [44500.0, 39.0], [45300.0, 33.0], [46100.0, 71.0], [46900.0, 77.0], [47700.0, 86.0], [48500.0, 71.0], [49300.0, 88.0], [50100.0, 94.0], [50900.0, 50.0], [51700.0, 41.0], [52500.0, 38.0], [54100.0, 33.0], [53300.0, 36.0], [54900.0, 28.0], [55700.0, 37.0], [56500.0, 34.0], [57300.0, 24.0], [58100.0, 17.0], [58900.0, 16.0], [59700.0, 30.0], [60500.0, 28.0], [61300.0, 39.0], [62100.0, 24.0], [62900.0, 31.0], [63700.0, 41.0], [64500.0, 34.0], [65300.0, 13.0], [65700.0, 8.0], [15300.0, 1.0], [15900.0, 1.0], [22200.0, 1.0], [25400.0, 1.0], [26200.0, 2.0], [26600.0, 3.0], [27400.0, 6.0], [27000.0, 2.0], [28200.0, 9.0], [27800.0, 6.0], [28600.0, 3.0], [29400.0, 15.0], [29000.0, 8.0], [29800.0, 5.0], [30200.0, 10.0], [30600.0, 13.0], [31000.0, 13.0], [31400.0, 15.0], [32600.0, 14.0], [31800.0, 12.0], [32200.0, 20.0], [33200.0, 32.0], [34000.0, 47.0], [34800.0, 56.0], [36400.0, 37.0], [35600.0, 46.0], [37200.0, 38.0], [38000.0, 50.0], [38800.0, 35.0], [39600.0, 33.0], [40400.0, 48.0], [41200.0, 52.0], [42000.0, 36.0], [42800.0, 58.0], [43600.0, 59.0], [44400.0, 35.0], [45200.0, 25.0], [46000.0, 70.0], [46800.0, 80.0], [47600.0, 59.0], [48400.0, 71.0], [49200.0, 92.0], [50000.0, 84.0], [50800.0, 67.0], [51600.0, 54.0], [52400.0, 36.0], [53200.0, 44.0], [54000.0, 33.0], [54800.0, 26.0], [55600.0, 34.0], [56400.0, 38.0], [57200.0, 14.0], [58000.0, 14.0], [58800.0, 18.0], [59600.0, 31.0], [60400.0, 27.0], [61200.0, 37.0], [62000.0, 29.0], [62800.0, 39.0], [63600.0, 31.0], [64400.0, 30.0], [65200.0, 21.0], [66400.0, 1.0], [66300.0, 1.0], [34300.0, 59.0], [33500.0, 41.0], [35100.0, 69.0], [35900.0, 51.0], [36700.0, 40.0], [37500.0, 44.0], [38300.0, 51.0], [39100.0, 27.0], [39900.0, 31.0], [40700.0, 60.0], [41500.0, 48.0], [42300.0, 41.0], [43100.0, 29.0], [43900.0, 38.0], [44700.0, 36.0], [45500.0, 41.0], [46300.0, 78.0], [47100.0, 63.0], [47900.0, 80.0], [48700.0, 69.0], [49500.0, 81.0], [50300.0, 84.0], [51100.0, 67.0], [51900.0, 48.0], [52700.0, 40.0], [53500.0, 58.0], [54300.0, 41.0], [55100.0, 37.0], [55900.0, 38.0], [56700.0, 32.0], [57500.0, 28.0], [58300.0, 15.0], [59100.0, 15.0], [59900.0, 28.0], [60700.0, 32.0], [61500.0, 40.0], [62300.0, 32.0], [63100.0, 27.0], [63900.0, 46.0], [64700.0, 26.0], [65500.0, 13.0], [66100.0, 2.0], [23500.0, 1.0], [23100.0, 1.0], [25100.0, 2.0], [24700.0, 1.0], [25900.0, 1.0], [26700.0, 6.0], [27500.0, 5.0], [27100.0, 5.0], [27900.0, 6.0], [28300.0, 13.0], [29500.0, 10.0], [28700.0, 11.0], [29100.0, 13.0], [29900.0, 3.0], [30300.0, 8.0], [30700.0, 12.0], [31100.0, 22.0], [31500.0, 17.0], [31900.0, 22.0], [32300.0, 13.0], [32700.0, 16.0], [34200.0, 50.0], [33400.0, 37.0], [35000.0, 53.0], [35800.0, 43.0], [36600.0, 39.0], [37400.0, 50.0], [38200.0, 35.0], [39000.0, 35.0], [39800.0, 28.0], [40600.0, 54.0], [41400.0, 52.0], [43000.0, 29.0], [42200.0, 43.0], [43800.0, 40.0], [44600.0, 33.0], [45400.0, 44.0], [46200.0, 71.0], [47000.0, 65.0], [47800.0, 77.0], [48600.0, 70.0], [49400.0, 80.0], [51000.0, 69.0], [50200.0, 76.0], [51800.0, 42.0], [52600.0, 45.0], [53400.0, 45.0], [54200.0, 27.0], [55000.0, 33.0], [55800.0, 47.0], [56600.0, 26.0], [57400.0, 26.0], [58200.0, 14.0], [59000.0, 18.0], [59800.0, 27.0], [60600.0, 34.0], [61400.0, 38.0], [62200.0, 19.0], [63000.0, 36.0], [63800.0, 45.0], [64600.0, 38.0], [65400.0, 17.0]], "isOverall": false, "label": "v2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 66700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 14800.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 14800.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 14800.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 74.42483660130719, "minX": 1.72732278E12, "maxY": 148.0, "series": [{"data": [[1.72732464E12, 148.0], [1.72732626E12, 148.0], [1.72732284E12, 148.0], [1.72732404E12, 148.0], [1.72732566E12, 148.0], [1.72732344E12, 148.0], [1.72732506E12, 148.0], [1.72732728E12, 148.0], [1.72732668E12, 148.0], [1.72732446E12, 148.0], [1.72732302E12, 148.0], [1.72732482E12, 148.0], [1.72732704E12, 148.0], [1.72732422E12, 148.0], [1.72732644E12, 148.0], [1.72732746E12, 146.58273381294953], [1.72732362E12, 148.0], [1.72732584E12, 148.0], [1.72732524E12, 148.0], [1.72732686E12, 148.0], [1.7273232E12, 148.0], [1.72732722E12, 148.0], [1.7273256E12, 148.0], [1.727325E12, 148.0], [1.72732662E12, 148.0], [1.72732278E12, 148.0], [1.7273244E12, 148.0], [1.72732602E12, 148.0], [1.72732338E12, 148.0], [1.7273238E12, 148.0], [1.72732542E12, 148.0], [1.72732416E12, 148.0], [1.72732578E12, 148.0], [1.72732356E12, 148.0], [1.72732296E12, 148.0], [1.72732518E12, 148.0], [1.7273274E12, 148.0], [1.72732458E12, 148.0], [1.7273268E12, 148.0], [1.72732398E12, 148.0], [1.7273262E12, 148.0], [1.72732434E12, 148.0], [1.72732656E12, 148.0], [1.72732314E12, 148.0], [1.72732374E12, 148.0], [1.72732596E12, 148.0], [1.72732536E12, 148.0], [1.72732698E12, 148.0], [1.72732476E12, 148.0], [1.72732638E12, 148.0], [1.72732512E12, 148.0], [1.72732674E12, 148.0], [1.72732332E12, 148.0], [1.72732452E12, 148.0], [1.72732614E12, 148.0], [1.72732392E12, 148.0], [1.72732554E12, 148.0], [1.7273229E12, 148.0], [1.72732494E12, 148.0], [1.72732716E12, 148.0], [1.72732368E12, 148.0], [1.7273253E12, 148.0], [1.72732752E12, 74.42483660130719], [1.7273247E12, 148.0], [1.72732692E12, 148.0], [1.72732308E12, 148.0], [1.7273241E12, 148.0], [1.72732632E12, 148.0], [1.72732734E12, 148.0], [1.7273235E12, 148.0], [1.72732572E12, 148.0], [1.72732386E12, 148.0], [1.72732608E12, 148.0], [1.72732548E12, 148.0], [1.7273271E12, 148.0], [1.72732326E12, 148.0], [1.72732488E12, 148.0], [1.7273265E12, 148.0], [1.72732428E12, 148.0], [1.7273259E12, 148.0]], "isOverall": false, "label": "writers", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72732752E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 13064.0, "minX": 1.0, "maxY": 65773.0, "series": [{"data": [[2.0, 14804.0], [3.0, 15343.0], [4.0, 14877.0], [5.0, 15962.0], [6.0, 22232.0], [7.0, 23184.0], [8.0, 22896.0], [9.0, 24176.0], [10.0, 23587.0], [11.0, 25671.0], [12.0, 27263.0], [13.0, 27439.0], [15.0, 28503.0], [16.0, 28862.0], [17.0, 28442.0], [18.0, 30357.0], [19.0, 31352.0], [20.0, 31579.0], [21.0, 32351.0], [22.0, 33426.0], [23.0, 33279.0], [24.0, 34681.0], [26.0, 35584.5], [27.0, 35952.0], [28.0, 36530.0], [29.0, 36579.0], [30.0, 37457.0], [31.0, 38032.0], [33.0, 38340.0], [32.0, 39104.0], [35.0, 40317.0], [34.0, 40644.0], [37.0, 40965.0], [36.0, 41136.0], [39.0, 42404.0], [38.0, 42419.0], [41.0, 42421.0], [40.0, 42917.0], [43.0, 43735.0], [42.0, 44031.0], [45.0, 46519.0], [44.0, 45305.0], [47.0, 46167.5], [49.0, 46147.0], [51.0, 46108.0], [50.0, 46867.0], [53.0, 47551.0], [52.0, 47007.0], [55.0, 47713.0], [54.0, 48100.0], [57.0, 48949.0], [56.0, 47878.0], [59.0, 49325.0], [58.0, 48879.0], [61.0, 48737.0], [60.0, 50390.0], [62.0, 49779.0], [67.0, 51895.0], [66.0, 50731.5], [64.0, 50885.0], [71.0, 52502.0], [70.0, 51598.0], [69.0, 52004.0], [68.0, 50969.0], [75.0, 54468.0], [74.0, 53595.0], [73.0, 53027.0], [72.0, 53248.0], [79.0, 54942.0], [78.0, 55077.0], [77.0, 54483.0], [76.0, 54183.0], [83.0, 57066.0], [82.0, 55866.0], [81.0, 55297.0], [80.0, 55040.0], [87.0, 56823.0], [86.0, 57287.0], [85.0, 56587.0], [84.0, 56053.0], [91.0, 58179.0], [90.0, 57197.0], [89.0, 56765.0], [88.0, 57444.0], [95.0, 59008.0], [94.0, 58025.0], [93.0, 58559.0], [92.0, 58176.0], [99.0, 60273.0], [98.0, 59039.0], [97.0, 59741.0], [96.0, 59306.0], [103.0, 61013.0], [102.0, 60316.0], [101.0, 59559.0], [100.0, 59716.0], [107.0, 60651.0], [106.0, 60736.0], [105.0, 60514.0], [104.0, 59610.0], [111.0, 62231.0], [110.0, 61447.0], [109.0, 61741.0], [108.0, 61569.0], [115.0, 62041.0], [114.0, 61234.0], [113.0, 62296.0], [119.0, 62277.0], [118.0, 62833.0], [117.0, 62686.0], [116.0, 61080.0], [123.0, 63497.5], [122.0, 62723.0], [121.0, 62810.0], [120.0, 63287.0], [127.0, 63555.0], [126.0, 63927.0], [125.0, 63441.5], [124.0, 63295.0], [135.0, 64165.5], [134.0, 64241.0], [133.0, 64278.6], [132.0, 63608.333333333336], [131.0, 62736.0], [130.0, 63075.0], [129.0, 64101.0], [128.0, 63012.0], [143.0, 64891.333333333336], [142.0, 64919.5], [141.0, 64148.5], [140.0, 65324.0], [139.0, 65120.0], [138.0, 64859.333333333336], [137.0, 64228.5], [136.0, 64749.666666666664], [148.0, 47146.40418977215], [147.0, 65085.3], [146.0, 65214.8], [145.0, 65773.0], [144.0, 64958.57142857143], [1.0, 13064.0]], "isOverall": false, "label": "v2", "isController": false}, {"data": [[147.22608108108088, 47226.5745945947]], "isOverall": false, "label": "v2-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 148.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72732278E12, "maxY": 206.36666666666667, "series": [{"data": [[1.72732464E12, 123.68333333333334], [1.72732626E12, 111.38333333333334], [1.72732284E12, 206.36666666666667], [1.72732404E12, 143.5], [1.72732566E12, 123.68333333333334], [1.72732344E12, 151.01666666666668], [1.72732506E12, 126.41666666666667], [1.72732728E12, 94.98333333333333], [1.72732668E12, 99.08333333333333], [1.72732446E12, 125.73333333333333], [1.72732302E12, 198.85], [1.72732482E12, 123.0], [1.72732704E12, 94.98333333333333], [1.72732422E12, 135.3], [1.72732644E12, 107.96666666666667], [1.72732746E12, 94.98333333333333], [1.72732362E12, 155.11666666666667], [1.72732584E12, 120.95], [1.72732524E12, 127.1], [1.72732686E12, 99.76666666666667], [1.7273232E12, 189.28333333333333], [1.72732722E12, 92.93333333333334], [1.7273256E12, 117.53333333333333], [1.727325E12, 114.8], [1.72732662E12, 102.5], [1.72732278E12, 1.3666666666666667], [1.7273244E12, 129.83333333333334], [1.72732602E12, 114.8], [1.72732338E12, 176.98333333333332], [1.7273238E12, 144.18333333333334], [1.72732542E12, 123.68333333333334], [1.72732416E12, 139.4], [1.72732578E12, 116.16666666666667], [1.72732356E12, 159.9], [1.72732296E12, 201.58333333333334], [1.72732518E12, 129.15], [1.7273274E12, 91.56666666666666], [1.72732458E12, 127.78333333333333], [1.7273268E12, 99.08333333333333], [1.72732398E12, 143.5], [1.7273262E12, 109.33333333333333], [1.72732434E12, 135.3], [1.72732656E12, 101.13333333333334], [1.72732314E12, 166.05], [1.72732374E12, 151.01666666666668], [1.72732596E12, 112.75], [1.72732536E12, 127.1], [1.72732698E12, 99.76666666666667], [1.72732476E12, 121.63333333333334], [1.72732638E12, 107.96666666666667], [1.72732512E12, 131.88333333333333], [1.72732674E12, 100.45], [1.72732332E12, 159.21666666666667], [1.72732452E12, 129.83333333333334], [1.72732614E12, 109.33333333333333], [1.72732392E12, 141.45], [1.72732554E12, 125.05], [1.7273229E12, 197.48333333333332], [1.72732494E12, 114.8], [1.72732716E12, 95.66666666666667], [1.72732368E12, 148.96666666666667], [1.7273253E12, 129.15], [1.72732752E12, 104.55], [1.7273247E12, 122.31666666666666], [1.72732692E12, 99.76666666666667], [1.72732308E12, 153.75], [1.7273241E12, 137.35], [1.72732632E12, 104.55], [1.72732734E12, 94.3], [1.7273235E12, 161.26666666666668], [1.72732572E12, 118.21666666666667], [1.72732386E12, 148.28333333333333], [1.72732608E12, 114.8], [1.72732548E12, 123.0], [1.7273271E12, 96.35], [1.72732326E12, 164.0], [1.72732488E12, 123.0], [1.7273265E12, 105.91666666666667], [1.72732428E12, 133.25], [1.7273259E12, 113.43333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72732464E12, 0.0], [1.72732626E12, 0.0], [1.72732284E12, 0.0], [1.72732404E12, 0.0], [1.72732566E12, 0.0], [1.72732344E12, 0.0], [1.72732506E12, 0.0], [1.72732728E12, 0.0], [1.72732668E12, 0.0], [1.72732446E12, 0.0], [1.72732302E12, 0.0], [1.72732482E12, 0.0], [1.72732704E12, 0.0], [1.72732422E12, 0.0], [1.72732644E12, 0.0], [1.72732746E12, 0.0], [1.72732362E12, 0.0], [1.72732584E12, 0.0], [1.72732524E12, 0.0], [1.72732686E12, 0.0], [1.7273232E12, 0.0], [1.72732722E12, 0.0], [1.7273256E12, 0.0], [1.727325E12, 0.0], [1.72732662E12, 0.0], [1.72732278E12, 0.0], [1.7273244E12, 0.0], [1.72732602E12, 0.0], [1.72732338E12, 0.0], [1.7273238E12, 0.0], [1.72732542E12, 0.0], [1.72732416E12, 0.0], [1.72732578E12, 0.0], [1.72732356E12, 0.0], [1.72732296E12, 0.0], [1.72732518E12, 0.0], [1.7273274E12, 0.0], [1.72732458E12, 0.0], [1.7273268E12, 0.0], [1.72732398E12, 0.0], [1.7273262E12, 0.0], [1.72732434E12, 0.0], [1.72732656E12, 0.0], [1.72732314E12, 0.0], [1.72732374E12, 0.0], [1.72732596E12, 0.0], [1.72732536E12, 0.0], [1.72732698E12, 0.0], [1.72732476E12, 0.0], [1.72732638E12, 0.0], [1.72732512E12, 0.0], [1.72732674E12, 0.0], [1.72732332E12, 0.0], [1.72732452E12, 0.0], [1.72732614E12, 0.0], [1.72732392E12, 0.0], [1.72732554E12, 0.0], [1.7273229E12, 0.0], [1.72732494E12, 0.0], [1.72732716E12, 0.0], [1.72732368E12, 0.0], [1.7273253E12, 0.0], [1.72732752E12, 0.0], [1.7273247E12, 0.0], [1.72732692E12, 0.0], [1.72732308E12, 0.0], [1.7273241E12, 0.0], [1.72732632E12, 0.0], [1.72732734E12, 0.0], [1.7273235E12, 0.0], [1.72732572E12, 0.0], [1.72732386E12, 0.0], [1.72732608E12, 0.0], [1.72732548E12, 0.0], [1.7273271E12, 0.0], [1.72732326E12, 0.0], [1.72732488E12, 0.0], [1.7273265E12, 0.0], [1.72732428E12, 0.0], [1.7273259E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72732752E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 21021.5, "minX": 1.72732278E12, "maxY": 65021.187050359724, "series": [{"data": [[1.72732464E12, 48263.06077348066], [1.72732626E12, 55752.11042944787], [1.72732284E12, 28398.88741721854], [1.72732404E12, 42771.10476190476], [1.72732566E12, 50171.82872928176], [1.72732344E12, 37319.00904977376], [1.72732506E12, 51164.59459459459], [1.72732728E12, 64361.69784172659], [1.72732668E12, 59826.80689655172], [1.72732446E12, 46707.940217391275], [1.72732302E12, 33657.560137457025], [1.72732482E12, 49899.79444444443], [1.72732704E12, 62470.302158273385], [1.72732422E12, 44265.373737373746], [1.72732644E12, 56695.50000000001], [1.72732746E12, 65021.187050359724], [1.72732362E12, 39023.330396475736], [1.72732584E12, 51626.225988700535], [1.72732524E12, 46741.88709677417], [1.72732686E12, 61511.51369863012], [1.7273232E12, 35302.90252707581], [1.72732722E12, 63968.04411764705], [1.7273256E12, 49767.023255813925], [1.727325E12, 51851.38095238092], [1.72732662E12, 59203.453333333324], [1.72732278E12, 21021.5], [1.7273244E12, 46348.073684210554], [1.72732602E12, 53272.809523809534], [1.72732338E12, 36828.53667953666], [1.7273238E12, 40911.07109004738], [1.72732542E12, 48400.19889502765], [1.72732416E12, 43928.21568627449], [1.72732578E12, 51123.80588235292], [1.72732356E12, 38416.34615384615], [1.72732296E12, 33399.833898305034], [1.72732518E12, 46330.883597883585], [1.7273274E12, 64629.76865671643], [1.72732458E12, 47798.26203208557], [1.7273268E12, 60760.66206896551], [1.72732398E12, 42540.97619047617], [1.7273262E12, 54832.80624999998], [1.72732434E12, 45577.1313131313], [1.72732656E12, 58348.189189189194], [1.72732314E12, 34848.54320987653], [1.72732374E12, 40344.601809954744], [1.72732596E12, 53163.19999999999], [1.72732536E12, 47927.682795698944], [1.72732698E12, 61656.404109589035], [1.72732476E12, 49386.623595505596], [1.72732638E12, 56343.34177215188], [1.72732512E12, 46327.538860103654], [1.72732674E12, 60365.81632653064], [1.72732332E12, 36135.37768240347], [1.72732452E12, 47335.45263157894], [1.72732614E12, 54363.61249999999], [1.72732392E12, 41768.09178743962], [1.72732554E12, 49306.043715846994], [1.7273229E12, 31449.484429065767], [1.72732494E12, 50946.380952380925], [1.72732716E12, 63166.921428571426], [1.72732368E12, 40286.935779816515], [1.7273253E12, 47485.57142857143], [1.72732752E12, 50247.2549019608], [1.7273247E12, 49058.184357541926], [1.72732692E12, 61403.40410958904], [1.72732308E12, 34260.42666666668], [1.7273241E12, 43374.47263681591], [1.72732632E12, 55596.63398692807], [1.72732734E12, 64411.33333333333], [1.7273235E12, 37904.84322033898], [1.72732572E12, 50709.45664739885], [1.72732386E12, 41402.84331797236], [1.72732608E12, 53698.66071428574], [1.72732548E12, 49007.266666666685], [1.7273271E12, 63134.992907801454], [1.72732326E12, 35587.26250000002], [1.72732488E12, 50268.050000000025], [1.7273265E12, 57475.780645161285], [1.72732428E12, 45054.061538461574], [1.7273259E12, 52339.716867469855]], "isOverall": false, "label": "v2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72732752E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 21021.0, "minX": 1.72732278E12, "maxY": 65021.158273381305, "series": [{"data": [[1.72732464E12, 48263.038674033174], [1.72732626E12, 55752.073619631905], [1.72732284E12, 28398.731788079476], [1.72732404E12, 42771.06666666664], [1.72732566E12, 50171.81767955801], [1.72732344E12, 37318.97285067873], [1.72732506E12, 51164.578378378385], [1.72732728E12, 64361.676258992804], [1.72732668E12, 59826.8], [1.72732446E12, 46707.940217391275], [1.72732302E12, 33657.49828178691], [1.72732482E12, 49899.77222222224], [1.72732704E12, 62470.28057553955], [1.72732422E12, 44265.33333333336], [1.72732644E12, 56695.47468354432], [1.72732746E12, 65021.158273381305], [1.72732362E12, 39023.32158590306], [1.72732584E12, 51626.21468926553], [1.72732524E12, 46741.87634408603], [1.72732686E12, 61511.50684931507], [1.7273232E12, 35302.84476534295], [1.72732722E12, 63968.0220588235], [1.7273256E12, 49766.9941860465], [1.727325E12, 51851.35714285714], [1.72732662E12, 59203.426666666666], [1.72732278E12, 21021.0], [1.7273244E12, 46348.0315789474], [1.72732602E12, 53272.78571428568], [1.72732338E12, 36828.50193050191], [1.7273238E12, 40911.06161137441], [1.72732542E12, 48400.17127071823], [1.72732416E12, 43928.176470588245], [1.72732578E12, 51123.794117647034], [1.72732356E12, 38416.277777777796], [1.72732296E12, 33399.77288135592], [1.72732518E12, 46330.86772486774], [1.7273274E12, 64629.738805970155], [1.72732458E12, 47798.23529411763], [1.7273268E12, 60760.61379310346], [1.72732398E12, 42540.938095238125], [1.7273262E12, 54832.78125000001], [1.72732434E12, 45577.101010100996], [1.72732656E12, 58348.1554054054], [1.72732314E12, 34848.47736625511], [1.72732374E12, 40344.56108597285], [1.72732596E12, 53163.19999999999], [1.72732536E12, 47927.65053763441], [1.72732698E12, 61656.38356164385], [1.72732476E12, 49386.606741573036], [1.72732638E12, 56343.31012658226], [1.72732512E12, 46327.523316062194], [1.72732674E12, 60365.802721088425], [1.72732332E12, 36135.33476394847], [1.72732452E12, 47335.44210526317], [1.72732614E12, 54363.60624999999], [1.72732392E12, 41768.048309178754], [1.72732554E12, 49306.016393442645], [1.7273229E12, 31449.411764705896], [1.72732494E12, 50946.351190476205], [1.72732716E12, 63166.914285714294], [1.72732368E12, 40286.889908256875], [1.7273253E12, 47485.560846560846], [1.72732752E12, 50247.241830065366], [1.7273247E12, 49058.17877094971], [1.72732692E12, 61403.397260273974], [1.72732308E12, 34260.3688888889], [1.7273241E12, 43374.442786069674], [1.72732632E12, 55596.63398692807], [1.72732734E12, 64411.304347826095], [1.7273235E12, 37904.813559322], [1.72732572E12, 50709.43352601156], [1.72732386E12, 41402.79262672809], [1.72732608E12, 53698.648809523824], [1.72732548E12, 49007.266666666685], [1.7273271E12, 63134.98581560285], [1.72732326E12, 35587.2166666667], [1.72732488E12, 50268.02222222224], [1.7273265E12, 57475.761290322596], [1.72732428E12, 45054.04102564102], [1.7273259E12, 52339.69277108435]], "isOverall": false, "label": "v2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72732752E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72732278E12, "maxY": 1613.5, "series": [{"data": [[1.72732464E12, 0.01104972375690608], [1.72732626E12, 0.006134969325153381], [1.72732284E12, 980.5397350993373], [1.72732404E12, 0.03333333333333334], [1.72732566E12, 0.0055248618784530384], [1.72732344E12, 0.018099547511312236], [1.72732506E12, 0.0], [1.72732728E12, 0.007194244604316547], [1.72732668E12, 0.0], [1.72732446E12, 0.010869565217391304], [1.72732302E12, 0.02405498281786941], [1.72732482E12, 0.005555555555555557], [1.72732704E12, 0.0], [1.72732422E12, 0.015151515151515168], [1.72732644E12, 0.012658227848101267], [1.72732746E12, 0.007194244604316549], [1.72732362E12, 0.0], [1.72732584E12, 0.0], [1.72732524E12, 0.005376344086021506], [1.72732686E12, 0.006849315068493154], [1.7273232E12, 0.003610108303249097], [1.72732722E12, 0.0], [1.7273256E12, 0.0], [1.727325E12, 0.005952380952380953], [1.72732662E12, 0.0], [1.72732278E12, 1613.5], [1.7273244E12, 0.0], [1.72732602E12, 0.005952380952380951], [1.72732338E12, 0.011583011583011588], [1.7273238E12, 0.023696682464454978], [1.72732542E12, 0.0], [1.72732416E12, 0.01470588235294118], [1.72732578E12, 0.017647058823529422], [1.72732356E12, 0.012820512820512825], [1.72732296E12, 0.0135593220338983], [1.72732518E12, 0.010582010582010583], [1.7273274E12, 0.007462686567164189], [1.72732458E12, 0.0], [1.7273268E12, 0.013793103448275867], [1.72732398E12, 0.023809523809523805], [1.7273262E12, 0.00625], [1.72732434E12, 0.0101010101010101], [1.72732656E12, 0.0], [1.72732314E12, 0.00823045267489712], [1.72732374E12, 0.022624434389140288], [1.72732596E12, 0.0], [1.72732536E12, 0.0], [1.72732698E12, 0.013698630136986302], [1.72732476E12, 0.0], [1.72732638E12, 0.012658227848101267], [1.72732512E12, 0.0], [1.72732674E12, 0.006802721088435384], [1.72732332E12, 0.004291845493562232], [1.72732452E12, 0.0], [1.72732614E12, 0.0], [1.72732392E12, 0.009661835748792268], [1.72732554E12, 0.010928961748633882], [1.7273229E12, 0.02422145328719725], [1.72732494E12, 0.011904761904761902], [1.72732716E12, 0.0], [1.72732368E12, 0.009174311926605503], [1.7273253E12, 0.005291005291005292], [1.72732752E12, 0.02614379084967321], [1.7273247E12, 0.005586592178770951], [1.72732692E12, 0.0], [1.72732308E12, 0.013333333333333326], [1.7273241E12, 0.0], [1.72732632E12, 0.01960784313725491], [1.72732734E12, 0.0], [1.7273235E12, 0.016949152542372888], [1.72732572E12, 0.005780346820809249], [1.72732386E12, 0.032258064516129045], [1.72732608E12, 0.011904761904761904], [1.72732548E12, 0.005555555555555557], [1.7273271E12, 0.0], [1.72732326E12, 0.0125], [1.72732488E12, 0.0], [1.7273265E12, 0.0], [1.72732428E12, 0.0], [1.7273259E12, 0.0]], "isOverall": false, "label": "v2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72732752E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13064.0, "minX": 1.72732278E12, "maxY": 66758.0, "series": [{"data": [[1.72732464E12, 49485.0], [1.72732626E12, 57332.0], [1.72732284E12, 31501.0], [1.72732404E12, 44059.0], [1.72732566E12, 51234.0], [1.72732344E12, 38846.0], [1.72732506E12, 54163.0], [1.72732728E12, 65812.0], [1.72732668E12, 61297.0], [1.72732446E12, 48169.0], [1.72732302E12, 34938.0], [1.72732482E12, 51259.0], [1.72732704E12, 63676.0], [1.72732422E12, 45644.0], [1.72732644E12, 57849.0], [1.72732746E12, 66758.0], [1.72732362E12, 40185.0], [1.72732584E12, 52664.0], [1.72732524E12, 47656.0], [1.72732686E12, 62956.0], [1.7273232E12, 36816.0], [1.72732722E12, 66081.0], [1.7273256E12, 51074.0], [1.727325E12, 53606.0], [1.72732662E12, 60599.0], [1.72732278E12, 21606.0], [1.7273244E12, 47892.0], [1.72732602E12, 54206.0], [1.72732338E12, 38250.0], [1.7273238E12, 42300.0], [1.72732542E12, 49436.0], [1.72732416E12, 45049.0], [1.72732578E12, 52331.0], [1.72732356E12, 39596.0], [1.72732296E12, 35115.0], [1.72732518E12, 47329.0], [1.7273274E12, 65892.0], [1.72732458E12, 49533.0], [1.7273268E12, 61885.0], [1.72732398E12, 43925.0], [1.7273262E12, 55903.0], [1.72732434E12, 47146.0], [1.72732656E12, 59959.0], [1.72732314E12, 35713.0], [1.72732374E12, 41624.0], [1.72732596E12, 54542.0], [1.72732536E12, 49413.0], [1.72732698E12, 62960.0], [1.72732476E12, 50855.0], [1.72732638E12, 57901.0], [1.72732512E12, 49202.0], [1.72732674E12, 61638.0], [1.72732332E12, 37352.0], [1.72732452E12, 48729.0], [1.72732614E12, 56361.0], [1.72732392E12, 43165.0], [1.72732554E12, 50505.0], [1.7273229E12, 33067.0], [1.72732494E12, 52589.0], [1.72732716E12, 64848.0], [1.72732368E12, 41706.0], [1.7273253E12, 48667.0], [1.72732752E12, 65115.0], [1.7273247E12, 51086.0], [1.72732692E12, 62882.0], [1.72732308E12, 35414.0], [1.7273241E12, 44852.0], [1.72732632E12, 56788.0], [1.72732734E12, 65808.0], [1.7273235E12, 39066.0], [1.72732572E12, 51791.0], [1.72732386E12, 42569.0], [1.72732608E12, 54996.0], [1.72732548E12, 50159.0], [1.7273271E12, 65349.0], [1.72732326E12, 36855.0], [1.72732488E12, 51600.0], [1.7273265E12, 58717.0], [1.72732428E12, 46592.0], [1.7273259E12, 53372.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72732464E12, 48965.8], [1.72732626E12, 56454.8], [1.72732284E12, 30146.5], [1.72732404E12, 43504.4], [1.72732566E12, 50697.8], [1.72732344E12, 37902.0], [1.72732506E12, 52826.0], [1.72732728E12, 65211.0], [1.72732668E12, 60585.6], [1.72732446E12, 47395.0], [1.72732302E12, 34391.4], [1.72732482E12, 50591.7], [1.72732704E12, 63157.0], [1.72732422E12, 44924.5], [1.72732644E12, 57401.3], [1.72732746E12, 65836.0], [1.72732362E12, 39680.4], [1.72732584E12, 52170.2], [1.72732524E12, 47379.6], [1.72732686E12, 62128.9], [1.7273232E12, 36179.4], [1.72732722E12, 64994.3], [1.7273256E12, 50314.2], [1.727325E12, 52717.6], [1.72732662E12, 59862.8], [1.72732278E12, 21606.0], [1.7273244E12, 47012.8], [1.72732602E12, 53866.3], [1.72732338E12, 37433.0], [1.7273238E12, 41540.0], [1.72732542E12, 49045.6], [1.72732416E12, 44516.0], [1.72732578E12, 51688.7], [1.72732356E12, 39032.0], [1.72732296E12, 34372.0], [1.72732518E12, 46914.0], [1.7273274E12, 65336.0], [1.72732458E12, 48525.2], [1.7273268E12, 61537.4], [1.72732398E12, 43192.3], [1.7273262E12, 55389.2], [1.72732434E12, 46241.3], [1.72732656E12, 59304.1], [1.72732314E12, 35414.2], [1.72732374E12, 40901.6], [1.72732596E12, 53812.0], [1.72732536E12, 48479.7], [1.72732698E12, 62228.9], [1.72732476E12, 50164.4], [1.72732638E12, 56972.8], [1.72732512E12, 47291.8], [1.72732674E12, 61141.8], [1.72732332E12, 36720.6], [1.72732452E12, 47976.2], [1.72732614E12, 55083.4], [1.72732392E12, 42274.4], [1.72732554E12, 49824.0], [1.7273229E12, 32387.0], [1.72732494E12, 51669.4], [1.72732716E12, 63835.9], [1.72732368E12, 41062.3], [1.7273253E12, 48156.0], [1.72732752E12, 63542.2], [1.7273247E12, 49725.0], [1.72732692E12, 62012.4], [1.72732308E12, 34911.6], [1.7273241E12, 44011.6], [1.72732632E12, 56189.6], [1.72732734E12, 65267.7], [1.7273235E12, 38492.4], [1.72732572E12, 51215.0], [1.72732386E12, 42017.8], [1.72732608E12, 54335.8], [1.72732548E12, 49654.0], [1.7273271E12, 63930.2], [1.72732326E12, 36111.9], [1.72732488E12, 51017.7], [1.7273265E12, 58193.6], [1.72732428E12, 45801.4], [1.7273259E12, 52914.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72732464E12, 49448.92], [1.72732626E12, 57144.479999999996], [1.72732284E12, 31229.05], [1.72732404E12, 44039.0], [1.72732566E12, 51195.46], [1.72732344E12, 38306.22], [1.72732506E12, 53769.979999999996], [1.72732728E12, 65766.4], [1.72732668E12, 61238.58], [1.72732446E12, 47940.35], [1.72732302E12, 34794.04], [1.72732482E12, 51157.75], [1.72732704E12, 63670.0], [1.72732422E12, 45475.7], [1.72732644E12, 57785.87], [1.72732746E12, 66644.8], [1.72732362E12, 40153.16], [1.72732584E12, 52573.52], [1.72732524E12, 47637.73], [1.72732686E12, 62954.59], [1.7273232E12, 36691.439999999995], [1.72732722E12, 65944.47], [1.7273256E12, 50909.75], [1.727325E12, 53303.090000000004], [1.72732662E12, 60540.35], [1.72732278E12, 21606.0], [1.7273244E12, 47520.72], [1.72732602E12, 54159.77], [1.72732338E12, 38058.0], [1.7273238E12, 41985.12], [1.72732542E12, 49431.9], [1.72732416E12, 45019.299999999996], [1.72732578E12, 52302.6], [1.72732356E12, 39549.8], [1.72732296E12, 34999.840000000004], [1.72732518E12, 47313.7], [1.7273274E12, 65879.4], [1.72732458E12, 48986.520000000004], [1.7273268E12, 61852.8], [1.72732398E12, 43859.72], [1.7273262E12, 55896.9], [1.72732434E12, 46894.54], [1.72732656E12, 59857.08], [1.72732314E12, 35634.04], [1.72732374E12, 41474.74], [1.72732596E12, 54363.8], [1.72732536E12, 48884.909999999996], [1.72732698E12, 62898.43], [1.72732476E12, 50736.5], [1.72732638E12, 57855.57], [1.72732512E12, 48455.64], [1.72732674E12, 61604.4], [1.72732332E12, 37099.44], [1.72732452E12, 48437.8], [1.72732614E12, 56282.92], [1.72732392E12, 42783.44], [1.72732554E12, 50256.36], [1.7273229E12, 32799.0], [1.72732494E12, 52348.88], [1.72732716E12, 64661.86], [1.72732368E12, 41650.96], [1.7273253E12, 48520.299999999996], [1.72732752E12, 65075.04], [1.7273247E12, 50536.399999999994], [1.72732692E12, 62810.56], [1.72732308E12, 35379.94], [1.7273241E12, 44660.68], [1.72732632E12, 56707.0], [1.72732734E12, 65731.95], [1.7273235E12, 39012.73], [1.72732572E12, 51582.32], [1.72732386E12, 42428.68], [1.72732608E12, 54902.85], [1.72732548E12, 50075.57], [1.7273271E12, 64993.68000000001], [1.72732326E12, 36562.95], [1.72732488E12, 51476.07], [1.7273265E12, 58709.16], [1.72732428E12, 46515.2], [1.7273259E12, 53337.83]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72732464E12, 49162.7], [1.72732626E12, 56586.4], [1.72732284E12, 30677.649999999998], [1.72732404E12, 43681.9], [1.72732566E12, 50777.1], [1.72732344E12, 38045.1], [1.72732506E12, 52955.0], [1.72732728E12, 65402.0], [1.72732668E12, 60745.4], [1.72732446E12, 47604.75], [1.72732302E12, 34572.8], [1.72732482E12, 50731.3], [1.72732704E12, 63329.0], [1.72732422E12, 45122.15], [1.72732644E12, 57480.75], [1.72732746E12, 66135.0], [1.72732362E12, 39777.2], [1.72732584E12, 52387.7], [1.72732524E12, 47487.75], [1.72732686E12, 62330.5], [1.7273232E12, 36386.4], [1.72732722E12, 65188.25], [1.7273256E12, 50402.65], [1.727325E12, 52859.4], [1.72732662E12, 60073.1], [1.72732278E12, 21606.0], [1.7273244E12, 47184.65], [1.72732602E12, 53980.7], [1.72732338E12, 37697.0], [1.7273238E12, 41749.8], [1.72732542E12, 49203.7], [1.72732416E12, 44709.75], [1.72732578E12, 51891.4], [1.72732356E12, 39197.0], [1.72732296E12, 34595.4], [1.72732518E12, 47051.0], [1.7273274E12, 65654.75], [1.72732458E12, 48692.0], [1.7273268E12, 61766.9], [1.72732398E12, 43364.65], [1.7273262E12, 55616.25], [1.72732434E12, 46384.1], [1.72732656E12, 59528.45], [1.72732314E12, 35512.0], [1.72732374E12, 41052.1], [1.72732596E12, 54000.5], [1.72732536E12, 48642.9], [1.72732698E12, 62483.75], [1.72732476E12, 50329.05], [1.72732638E12, 57160.8], [1.72732512E12, 47673.799999999996], [1.72732674E12, 61258.6], [1.72732332E12, 36837.3], [1.72732452E12, 48088.45], [1.72732614E12, 55306.05], [1.72732392E12, 42448.0], [1.72732554E12, 50016.6], [1.7273229E12, 32558.5], [1.72732494E12, 51754.65], [1.72732716E12, 64035.75], [1.72732368E12, 41230.35], [1.7273253E12, 48265.5], [1.72732752E12, 64027.49999999999], [1.7273247E12, 49963.0], [1.72732692E12, 62203.9], [1.72732308E12, 35037.3], [1.7273241E12, 44264.799999999996], [1.72732632E12, 56353.799999999996], [1.72732734E12, 65447.2], [1.7273235E12, 38709.65], [1.72732572E12, 51302.6], [1.72732386E12, 42226.1], [1.72732608E12, 54570.9], [1.72732548E12, 49877.299999999996], [1.7273271E12, 64067.9], [1.72732326E12, 36228.9], [1.72732488E12, 51154.95], [1.7273265E12, 58446.0], [1.72732428E12, 45901.8], [1.7273259E12, 53067.85]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72732464E12, 46849.0], [1.72732626E12, 54091.0], [1.72732284E12, 23794.0], [1.72732404E12, 41208.0], [1.72732566E12, 49145.0], [1.72732344E12, 36185.0], [1.72732506E12, 47464.0], [1.72732728E12, 62872.0], [1.72732668E12, 58340.0], [1.72732446E12, 45121.0], [1.72732302E12, 32067.0], [1.72732482E12, 48650.0], [1.72732704E12, 61016.0], [1.72732422E12, 42888.0], [1.72732644E12, 55273.0], [1.72732746E12, 63486.0], [1.72732362E12, 37664.0], [1.72732584E12, 49928.0], [1.72732524E12, 45288.0], [1.72732686E12, 60046.0], [1.7273232E12, 33704.0], [1.72732722E12, 61908.0], [1.7273256E12, 48739.0], [1.727325E12, 50171.0], [1.72732662E12, 57793.0], [1.72732278E12, 20437.0], [1.7273244E12, 44921.0], [1.72732602E12, 51414.0], [1.72732338E12, 35659.0], [1.7273238E12, 39610.0], [1.72732542E12, 47292.0], [1.72732416E12, 42229.0], [1.72732578E12, 49816.0], [1.72732356E12, 37036.0], [1.72732296E12, 31044.0], [1.72732518E12, 45172.0], [1.7273274E12, 63072.0], [1.72732458E12, 45671.0], [1.7273268E12, 59177.0], [1.72732398E12, 41156.0], [1.7273262E12, 53360.0], [1.72732434E12, 44248.0], [1.72732656E12, 56891.0], [1.72732314E12, 33480.0], [1.72732374E12, 39375.0], [1.72732596E12, 51906.0], [1.72732536E12, 46694.0], [1.72732698E12, 59969.0], [1.72732476E12, 47338.0], [1.72732638E12, 55118.0], [1.72732512E12, 44932.0], [1.72732674E12, 59088.0], [1.72732332E12, 34979.0], [1.72732452E12, 45705.0], [1.72732614E12, 52843.0], [1.72732392E12, 40712.0], [1.72732554E12, 48160.0], [1.7273229E12, 28360.0], [1.72732494E12, 49269.0], [1.72732716E12, 61610.0], [1.72732368E12, 38330.0], [1.7273253E12, 46280.0], [1.72732752E12, 13064.0], [1.7273247E12, 47704.0], [1.72732692E12, 59698.0], [1.72732308E12, 32374.0], [1.7273241E12, 42001.0], [1.72732632E12, 54301.0], [1.72732734E12, 62889.0], [1.7273235E12, 36713.0], [1.72732572E12, 49717.0], [1.72732386E12, 39910.0], [1.72732608E12, 52341.0], [1.72732548E12, 47798.0], [1.7273271E12, 61588.0], [1.72732326E12, 34239.0], [1.72732488E12, 48945.0], [1.7273265E12, 56034.0], [1.72732428E12, 43732.0], [1.7273259E12, 50931.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72732464E12, 48294.0], [1.72732626E12, 55802.0], [1.72732284E12, 28422.5], [1.72732404E12, 42774.0], [1.72732566E12, 50157.0], [1.72732344E12, 37377.0], [1.72732506E12, 51670.0], [1.72732728E12, 64313.0], [1.72732668E12, 59812.0], [1.72732446E12, 46712.5], [1.72732302E12, 33749.0], [1.72732482E12, 49913.0], [1.72732704E12, 62509.0], [1.72732422E12, 44313.0], [1.72732644E12, 56714.0], [1.72732746E12, 65007.0], [1.72732362E12, 39012.0], [1.72732584E12, 51659.0], [1.72732524E12, 46744.0], [1.72732686E12, 61540.0], [1.7273232E12, 35259.0], [1.72732722E12, 63999.5], [1.7273256E12, 49775.0], [1.727325E12, 51852.0], [1.72732662E12, 59231.5], [1.72732278E12, 21021.5], [1.7273244E12, 46365.0], [1.72732602E12, 53299.0], [1.72732338E12, 36847.0], [1.7273238E12, 40924.0], [1.72732542E12, 48360.0], [1.72732416E12, 43958.0], [1.72732578E12, 51150.0], [1.72732356E12, 38393.5], [1.72732296E12, 33590.0], [1.72732518E12, 46301.0], [1.7273274E12, 64697.0], [1.72732458E12, 47795.0], [1.7273268E12, 60802.0], [1.72732398E12, 42567.0], [1.7273262E12, 54862.5], [1.72732434E12, 45595.5], [1.72732656E12, 58327.0], [1.72732314E12, 34886.0], [1.72732374E12, 40323.0], [1.72732596E12, 53129.0], [1.72732536E12, 47924.5], [1.72732698E12, 61674.0], [1.72732476E12, 49357.5], [1.72732638E12, 56384.0], [1.72732512E12, 46203.0], [1.72732674E12, 60341.0], [1.72732332E12, 36147.0], [1.72732452E12, 47368.5], [1.72732614E12, 54336.5], [1.72732392E12, 41793.0], [1.72732554E12, 49322.0], [1.7273229E12, 31499.0], [1.72732494E12, 50980.5], [1.72732716E12, 63168.5], [1.72732368E12, 40447.5], [1.7273253E12, 47511.0], [1.72732752E12, 54483.0], [1.7273247E12, 49061.0], [1.72732692E12, 61398.0], [1.72732308E12, 34274.0], [1.7273241E12, 43381.0], [1.72732632E12, 55617.0], [1.72732734E12, 64399.5], [1.7273235E12, 37897.0], [1.72732572E12, 50728.0], [1.72732386E12, 41362.0], [1.72732608E12, 53693.5], [1.72732548E12, 48994.5], [1.7273271E12, 63116.0], [1.72732326E12, 35579.0], [1.72732488E12, 50252.5], [1.7273265E12, 57465.0], [1.72732428E12, 45057.0], [1.7273259E12, 52316.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72732752E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26942.5, "minX": 1.0, "maxY": 52623.0, "series": [{"data": [[2.0, 51247.0], [8.0, 35496.5], [9.0, 34551.0], [39.0, 30266.0], [10.0, 33805.0], [11.0, 33899.5], [12.0, 31757.0], [3.0, 49980.0], [13.0, 29847.0], [14.0, 33293.0], [1.0, 52623.0], [16.0, 31220.5], [4.0, 48703.5], [17.0, 31352.0], [19.0, 30453.0], [20.0, 28377.5], [5.0, 46689.0], [21.0, 29699.5], [22.0, 31944.5], [24.0, 26942.5], [6.0, 41592.0], [27.0, 29138.5], [7.0, 38100.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 39.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26942.5, "minX": 1.0, "maxY": 52623.0, "series": [{"data": [[2.0, 51247.0], [8.0, 35496.5], [9.0, 34551.0], [39.0, 30266.0], [10.0, 33805.0], [11.0, 33899.5], [12.0, 31757.0], [3.0, 49980.0], [13.0, 29847.0], [14.0, 33293.0], [1.0, 52623.0], [16.0, 31220.5], [4.0, 48703.0], [17.0, 31352.0], [19.0, 30452.5], [20.0, 28377.5], [5.0, 46689.0], [21.0, 29699.5], [22.0, 31944.5], [24.0, 26942.5], [6.0, 41591.5], [27.0, 29138.5], [7.0, 38100.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 39.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.72732278E12, "maxY": 5.033333333333333, "series": [{"data": [[1.72732464E12, 3.0166666666666666], [1.72732626E12, 2.716666666666667], [1.72732284E12, 5.033333333333333], [1.72732404E12, 3.5], [1.72732566E12, 3.0166666666666666], [1.72732344E12, 3.683333333333333], [1.72732506E12, 3.0833333333333335], [1.72732728E12, 2.316666666666667], [1.72732668E12, 2.4166666666666665], [1.72732446E12, 3.066666666666667], [1.72732302E12, 4.85], [1.72732482E12, 3.0], [1.72732704E12, 2.316666666666667], [1.72732422E12, 3.3], [1.72732644E12, 2.6333333333333333], [1.72732746E12, 2.1], [1.72732362E12, 3.783333333333333], [1.72732584E12, 2.95], [1.72732524E12, 3.1], [1.72732686E12, 2.433333333333333], [1.7273232E12, 4.616666666666666], [1.72732722E12, 2.2666666666666666], [1.7273256E12, 2.8666666666666667], [1.727325E12, 2.8], [1.72732662E12, 2.5], [1.72732278E12, 2.5], [1.7273244E12, 3.1666666666666665], [1.72732602E12, 2.8], [1.72732338E12, 4.316666666666666], [1.7273238E12, 3.5166666666666666], [1.72732542E12, 3.0166666666666666], [1.72732416E12, 3.4], [1.72732578E12, 2.8333333333333335], [1.72732356E12, 3.9], [1.72732296E12, 4.916666666666667], [1.72732518E12, 3.15], [1.7273274E12, 2.2333333333333334], [1.72732458E12, 3.1166666666666667], [1.7273268E12, 2.4166666666666665], [1.72732398E12, 3.5], [1.7273262E12, 2.6666666666666665], [1.72732434E12, 3.3], [1.72732656E12, 2.466666666666667], [1.72732314E12, 4.066666666666666], [1.72732374E12, 3.683333333333333], [1.72732596E12, 2.75], [1.72732536E12, 3.1], [1.72732698E12, 2.433333333333333], [1.72732476E12, 2.966666666666667], [1.72732638E12, 2.6333333333333333], [1.72732512E12, 3.216666666666667], [1.72732674E12, 2.45], [1.72732332E12, 3.8833333333333333], [1.72732452E12, 3.1666666666666665], [1.72732614E12, 2.6666666666666665], [1.72732392E12, 3.45], [1.72732554E12, 3.05], [1.7273229E12, 4.816666666666666], [1.72732494E12, 2.8], [1.72732716E12, 2.3333333333333335], [1.72732368E12, 3.6333333333333333], [1.7273253E12, 3.15], [1.72732752E12, 0.3], [1.7273247E12, 2.9833333333333334], [1.72732692E12, 2.433333333333333], [1.72732308E12, 3.7333333333333334], [1.7273241E12, 3.35], [1.72732632E12, 2.55], [1.72732734E12, 2.3], [1.7273235E12, 3.933333333333333], [1.72732572E12, 2.8833333333333333], [1.72732386E12, 3.6166666666666667], [1.72732608E12, 2.8], [1.72732548E12, 3.0], [1.7273271E12, 2.35], [1.72732326E12, 4.0], [1.72732488E12, 3.0], [1.7273265E12, 2.5833333333333335], [1.72732428E12, 3.25], [1.7273259E12, 2.7666666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72732752E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.72732278E12, "maxY": 5.033333333333333, "series": [{"data": [[1.72732464E12, 3.0166666666666666], [1.72732626E12, 2.716666666666667], [1.72732284E12, 5.033333333333333], [1.72732404E12, 3.5], [1.72732566E12, 3.0166666666666666], [1.72732344E12, 3.683333333333333], [1.72732506E12, 3.0833333333333335], [1.72732728E12, 2.316666666666667], [1.72732668E12, 2.4166666666666665], [1.72732446E12, 3.066666666666667], [1.72732302E12, 4.85], [1.72732482E12, 3.0], [1.72732704E12, 2.316666666666667], [1.72732422E12, 3.3], [1.72732644E12, 2.6333333333333333], [1.72732746E12, 2.316666666666667], [1.72732362E12, 3.783333333333333], [1.72732584E12, 2.95], [1.72732524E12, 3.1], [1.72732686E12, 2.433333333333333], [1.7273232E12, 4.616666666666666], [1.72732722E12, 2.2666666666666666], [1.7273256E12, 2.8666666666666667], [1.727325E12, 2.8], [1.72732662E12, 2.5], [1.72732278E12, 0.03333333333333333], [1.7273244E12, 3.1666666666666665], [1.72732602E12, 2.8], [1.72732338E12, 4.316666666666666], [1.7273238E12, 3.5166666666666666], [1.72732542E12, 3.0166666666666666], [1.72732416E12, 3.4], [1.72732578E12, 2.8333333333333335], [1.72732356E12, 3.9], [1.72732296E12, 4.916666666666667], [1.72732518E12, 3.15], [1.7273274E12, 2.2333333333333334], [1.72732458E12, 3.1166666666666667], [1.7273268E12, 2.4166666666666665], [1.72732398E12, 3.5], [1.7273262E12, 2.6666666666666665], [1.72732434E12, 3.3], [1.72732656E12, 2.466666666666667], [1.72732314E12, 4.05], [1.72732374E12, 3.683333333333333], [1.72732596E12, 2.75], [1.72732536E12, 3.1], [1.72732698E12, 2.433333333333333], [1.72732476E12, 2.966666666666667], [1.72732638E12, 2.6333333333333333], [1.72732512E12, 3.216666666666667], [1.72732674E12, 2.45], [1.72732332E12, 3.8833333333333333], [1.72732452E12, 3.1666666666666665], [1.72732614E12, 2.6666666666666665], [1.72732392E12, 3.45], [1.72732554E12, 3.05], [1.7273229E12, 4.816666666666666], [1.72732494E12, 2.8], [1.72732716E12, 2.3333333333333335], [1.72732368E12, 3.6333333333333333], [1.7273253E12, 3.15], [1.72732752E12, 2.55], [1.7273247E12, 2.9833333333333334], [1.72732692E12, 2.433333333333333], [1.72732308E12, 3.75], [1.7273241E12, 3.35], [1.72732632E12, 2.55], [1.72732734E12, 2.3], [1.7273235E12, 3.933333333333333], [1.72732572E12, 2.8833333333333333], [1.72732386E12, 3.6166666666666667], [1.72732608E12, 2.8], [1.72732548E12, 3.0], [1.7273271E12, 2.35], [1.72732326E12, 4.0], [1.72732488E12, 3.0], [1.7273265E12, 2.5833333333333335], [1.72732428E12, 3.25], [1.7273259E12, 2.7666666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72732752E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.72732278E12, "maxY": 5.033333333333333, "series": [{"data": [[1.72732464E12, 3.0166666666666666], [1.72732626E12, 2.716666666666667], [1.72732284E12, 5.033333333333333], [1.72732404E12, 3.5], [1.72732566E12, 3.0166666666666666], [1.72732344E12, 3.683333333333333], [1.72732506E12, 3.0833333333333335], [1.72732728E12, 2.316666666666667], [1.72732668E12, 2.4166666666666665], [1.72732446E12, 3.066666666666667], [1.72732302E12, 4.85], [1.72732482E12, 3.0], [1.72732704E12, 2.316666666666667], [1.72732422E12, 3.3], [1.72732644E12, 2.6333333333333333], [1.72732746E12, 2.316666666666667], [1.72732362E12, 3.783333333333333], [1.72732584E12, 2.95], [1.72732524E12, 3.1], [1.72732686E12, 2.433333333333333], [1.7273232E12, 4.616666666666666], [1.72732722E12, 2.2666666666666666], [1.7273256E12, 2.8666666666666667], [1.727325E12, 2.8], [1.72732662E12, 2.5], [1.72732278E12, 0.03333333333333333], [1.7273244E12, 3.1666666666666665], [1.72732602E12, 2.8], [1.72732338E12, 4.316666666666666], [1.7273238E12, 3.5166666666666666], [1.72732542E12, 3.0166666666666666], [1.72732416E12, 3.4], [1.72732578E12, 2.8333333333333335], [1.72732356E12, 3.9], [1.72732296E12, 4.916666666666667], [1.72732518E12, 3.15], [1.7273274E12, 2.2333333333333334], [1.72732458E12, 3.1166666666666667], [1.7273268E12, 2.4166666666666665], [1.72732398E12, 3.5], [1.7273262E12, 2.6666666666666665], [1.72732434E12, 3.3], [1.72732656E12, 2.466666666666667], [1.72732314E12, 4.05], [1.72732374E12, 3.683333333333333], [1.72732596E12, 2.75], [1.72732536E12, 3.1], [1.72732698E12, 2.433333333333333], [1.72732476E12, 2.966666666666667], [1.72732638E12, 2.6333333333333333], [1.72732512E12, 3.216666666666667], [1.72732674E12, 2.45], [1.72732332E12, 3.8833333333333333], [1.72732452E12, 3.1666666666666665], [1.72732614E12, 2.6666666666666665], [1.72732392E12, 3.45], [1.72732554E12, 3.05], [1.7273229E12, 4.816666666666666], [1.72732494E12, 2.8], [1.72732716E12, 2.3333333333333335], [1.72732368E12, 3.6333333333333333], [1.7273253E12, 3.15], [1.72732752E12, 2.55], [1.7273247E12, 2.9833333333333334], [1.72732692E12, 2.433333333333333], [1.72732308E12, 3.75], [1.7273241E12, 3.35], [1.72732632E12, 2.55], [1.72732734E12, 2.3], [1.7273235E12, 3.933333333333333], [1.72732572E12, 2.8833333333333333], [1.72732386E12, 3.6166666666666667], [1.72732608E12, 2.8], [1.72732548E12, 3.0], [1.7273271E12, 2.35], [1.72732326E12, 4.0], [1.72732488E12, 3.0], [1.7273265E12, 2.5833333333333335], [1.72732428E12, 3.25], [1.7273259E12, 2.7666666666666666]], "isOverall": false, "label": "v2-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72732752E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.72732278E12, "maxY": 5.033333333333333, "series": [{"data": [[1.72732464E12, 3.0166666666666666], [1.72732626E12, 2.716666666666667], [1.72732284E12, 5.033333333333333], [1.72732404E12, 3.5], [1.72732566E12, 3.0166666666666666], [1.72732344E12, 3.683333333333333], [1.72732506E12, 3.0833333333333335], [1.72732728E12, 2.316666666666667], [1.72732668E12, 2.4166666666666665], [1.72732446E12, 3.066666666666667], [1.72732302E12, 4.85], [1.72732482E12, 3.0], [1.72732704E12, 2.316666666666667], [1.72732422E12, 3.3], [1.72732644E12, 2.6333333333333333], [1.72732746E12, 2.316666666666667], [1.72732362E12, 3.783333333333333], [1.72732584E12, 2.95], [1.72732524E12, 3.1], [1.72732686E12, 2.433333333333333], [1.7273232E12, 4.616666666666666], [1.72732722E12, 2.2666666666666666], [1.7273256E12, 2.8666666666666667], [1.727325E12, 2.8], [1.72732662E12, 2.5], [1.72732278E12, 0.03333333333333333], [1.7273244E12, 3.1666666666666665], [1.72732602E12, 2.8], [1.72732338E12, 4.316666666666666], [1.7273238E12, 3.5166666666666666], [1.72732542E12, 3.0166666666666666], [1.72732416E12, 3.4], [1.72732578E12, 2.8333333333333335], [1.72732356E12, 3.9], [1.72732296E12, 4.916666666666667], [1.72732518E12, 3.15], [1.7273274E12, 2.2333333333333334], [1.72732458E12, 3.1166666666666667], [1.7273268E12, 2.4166666666666665], [1.72732398E12, 3.5], [1.7273262E12, 2.6666666666666665], [1.72732434E12, 3.3], [1.72732656E12, 2.466666666666667], [1.72732314E12, 4.05], [1.72732374E12, 3.683333333333333], [1.72732596E12, 2.75], [1.72732536E12, 3.1], [1.72732698E12, 2.433333333333333], [1.72732476E12, 2.966666666666667], [1.72732638E12, 2.6333333333333333], [1.72732512E12, 3.216666666666667], [1.72732674E12, 2.45], [1.72732332E12, 3.8833333333333333], [1.72732452E12, 3.1666666666666665], [1.72732614E12, 2.6666666666666665], [1.72732392E12, 3.45], [1.72732554E12, 3.05], [1.7273229E12, 4.816666666666666], [1.72732494E12, 2.8], [1.72732716E12, 2.3333333333333335], [1.72732368E12, 3.6333333333333333], [1.7273253E12, 3.15], [1.72732752E12, 2.55], [1.7273247E12, 2.9833333333333334], [1.72732692E12, 2.433333333333333], [1.72732308E12, 3.75], [1.7273241E12, 3.35], [1.72732632E12, 2.55], [1.72732734E12, 2.3], [1.7273235E12, 3.933333333333333], [1.72732572E12, 2.8833333333333333], [1.72732386E12, 3.6166666666666667], [1.72732608E12, 2.8], [1.72732548E12, 3.0], [1.7273271E12, 2.35], [1.72732326E12, 4.0], [1.72732488E12, 3.0], [1.7273265E12, 2.5833333333333335], [1.72732428E12, 3.25], [1.7273259E12, 2.7666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72732752E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

